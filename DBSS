package com.mycompany.two_server_simulation;

import java.util.*;

/**
 *
 * @author Yasmine
 */

public class main {

    static int range(int RN, double[] prob) {
        int i;
        double cdf =0;
        for (i = 0; i < prob.length; i++) {
            cdf+=prob[i];
            if ((RN) < cdf*100) {
                break;
            }
        }
        return i;
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        System.out.println("would you like the default values(1) or to enter the values yourself(any other digit)?");
        int choice = scan.nextInt();
        int calls=26,IAT_values[]={1,2,3,4},AST_values[]={2,3,4,5},BST_values[]={2,3,4,5};
        double [] IAT_probs={0.25,0.4,0.2,0.15},AST_probs={0.3,0.28,0.25,0.17},BST_probs={0.35,0.25,0.2,0.2};
        String results [][] = new String[calls+1][15];
        results[0][0] = "call ID";
        results[0][1] = "RN IAT";
        results[0][2] = "IAT";
        results[0][3] = "clock";
        results[0][4] = "RN ST";
        results[0][5] = "albe st begins";
        results[0][6] = "albe st";
        results[0][7] = "albe st ends";
        results[0][8] = "baker st begins";
        results[0][9] = "baker st";
        results[0][10] = "backer st ends";
        results[0][11] = "time spent in system";
        results[0][12] = "idle time albe";
        results[0][13] = "idle time baker";
        results[0][14] = "queue";
        int [] rn_IAT = {0,0,26,98,90,26,42,74,80,68,22,48,34,45,24,34,63,38,80,42,56,89,18,51,71,16,92};
        int [] rn_ST = {0,95,21,51,92,89,38,13,61,50,49,39,53,88,1,81,53,81,64,1,67,1,47,75,57,87,47};
        if(choice==1){
        }else{
        System.out.println("enter number of calls :");
           calls = scan.nextInt();
           results = new String [calls+1][15];
           results[0][0] = "call ID";
        results[0][1] = "RN IAT";
        results[0][2] = "IAT";
        results[0][3] = "clock";
        results[0][4] = "RN ST";
        results[0][5] = "albe st begins";
        results[0][6] = "albe st";
        results[0][7] = "albe st ends";
        results[0][8] = "baker st begins";
        results[0][9] = "baker st";
        results[0][10] = "backer st ends";
        results[0][11] = "time spent in system";
        results[0][12] = "idle time albe";
        results[0][13] = "idle time baker";
        results[0][14] = "queue";
        System.out.println("enter number of IAT values :");
        int number_of_IAT = scan.nextInt();
        IAT_values = new int[number_of_IAT];
        System.out.println("enter the values of IAT :");
        for (int i = 0; i < number_of_IAT; i++) {
            IAT_values[i] = scan.nextInt();
        }
        int sum = 0;
        System.out.println("enter probability of each value of IAT");
        IAT_probs = new double[number_of_IAT];
        for (int i = 0; i < number_of_IAT; i++) {
            IAT_probs[i] = scan.nextDouble();
            sum += IAT_probs[i];
        }
        //check that sum=1;
        System.out.println("enter number of albe's ST values :");
        int number_of_AST = scan.nextInt();
        AST_values = new int[number_of_AST];
        System.out.println("enter the values of albe's st values :");
        for (int i = 0; i < number_of_AST; i++) {
            AST_values[i] = scan.nextInt();
        }
        sum = 0;
        System.out.println("enter probability of each value of albe's st");
        AST_probs = new double[number_of_AST];
        for (int i = 0; i < number_of_AST; i++) {
            AST_probs[i] = scan.nextDouble();
            sum += AST_probs[i];
        }
        //check that sum=1;
        System.out.println("enter number of baker's st values :");
        int number_of_BST = scan.nextInt();
        BST_values = new int[number_of_BST];
        System.out.println("enter the values of baker's st :");
        for (int i = 0; i < number_of_BST; i++) {
            BST_values[i] = scan.nextInt();
        }
        sum = 0;
        System.out.println("enter probability of each value of baker's st");
        BST_probs = new double[number_of_BST];
        for (int i = 0; i < number_of_BST; i++) {
            BST_probs[i] = scan.nextDouble();
            sum += BST_probs[i];
        }
    }
        //check that sum=1;
        int RN_IAT = 0, RN_ST = 0, clock = 0, albe_st_begin = 0, baker_st_begin = 0, albe_st = 0, albe_st_end = 0, baker_st = 0, baker_st_end = 0, Time_spent, idle_albe, idle_baker;
        int last_BSTE = 0, last_ASTE = 0;
        for (int i = 1; i < results.length; i++) {
            results[i][0] = Integer.toString(i);
            if(choice==1){
            results[i][1]=Integer.toString(rn_IAT[i]);
            RN_IAT=rn_IAT[i];
            RN_ST = rn_ST[i];
            results[i][4] = Integer.toString(RN_ST);
            }else{
            RN_IAT = (int) (Math.random() * 100);
            results[i][1] = Integer.toString(RN_IAT);
            RN_ST = (int) (Math.random() * 100);
            results[i][4] = Integer.toString(RN_ST);
            }
            
            if (i == 1) {
                results[i][1] = "-";
                results[i][2] = "-";
                results[i][3] = Integer.toString(0);
            } else {
                int IAT = IAT_values[range(RN_IAT, IAT_probs)];
                results[i][2] = Integer.toString(IAT);
                clock += IAT;
                results[i][3] = Integer.toString(clock);
            }
            
            if (clock >= baker_st_end) {
                baker_st = BST_values[range(RN_ST, BST_probs)];
                results[i][9] = Integer.toString(baker_st);
                baker_st_begin = clock;
                results[i][8] = Integer.toString(baker_st_begin);
                last_BSTE = baker_st_end;
                baker_st_end = baker_st + baker_st_begin;
                results[i][10] = Integer.toString(baker_st_end);
                Time_spent = baker_st;
                results[i][11] = Integer.toString(Time_spent);
                if (i == 1) {
                    results[i][13] = Integer.toString(0);
                } else {
                    idle_baker = baker_st_begin - last_BSTE;
                    results[i][13] = Integer.toString(idle_baker);
                }
                results[i][14] = Integer.toString(0);
                results[i][5] = "-";
                results[i][6] = "-";
                results[i][7] = "-";
                results[i][12] = "-";
            } else if (clock >= albe_st_end) {
                albe_st = AST_values[range(RN_ST, AST_probs)];
                results[i][6] = Integer.toString(albe_st);
                albe_st_begin = clock;
                results[i][5] = Integer.toString(albe_st_begin);
                last_ASTE = albe_st_end;
                albe_st_end = albe_st + albe_st_begin;
                results[i][7] = Integer.toString(albe_st_end);
                Time_spent = albe_st;
                results[i][11] = Integer.toString(Time_spent);
                if (i == 1) {
                    results[i][12] = Integer.toString(0);
                } else {
                    idle_albe = albe_st_begin - last_ASTE;
                    results[i][12] = Integer.toString(idle_albe);
                }
                results[i][14] = Integer.toString(0);
                results[i][8] = "-";
                results[i][9] = "-";
                results[i][10] = "-";
                results[i][13] = "-";
            } else if (baker_st_end <= albe_st_end){
                baker_st = BST_values[range(RN_ST, BST_probs)];
                results[i][9] = Integer.toString(baker_st);
                int queue = baker_st_end-clock;
                baker_st_begin = baker_st_end;
                results[i][8] = Integer.toString(baker_st_begin);
                last_BSTE = baker_st_end;
                baker_st_end = baker_st + baker_st_begin;
                results[i][10] = Integer.toString(baker_st_end);
                Time_spent = baker_st + queue;
                results[i][11] = Integer.toString(Time_spent);
                results[i][13] = Integer.toString(0);
                results[i][14] = Integer.toString(queue);
                results[i][5] = "-";
                results[i][6] = "-";
                results[i][7] = "-";
                results[i][12] = "-";
            } else {
                albe_st = AST_values[range(RN_ST, AST_probs)];
                results[i][6] = Integer.toString(albe_st);
                int queue = albe_st_end-clock;
                albe_st_begin = albe_st_end;
                results[i][5] = Integer.toString(albe_st_begin);
                last_ASTE = albe_st_end;
                albe_st_end = albe_st + albe_st_begin;
                results[i][7] = Integer.toString(albe_st_end);
                Time_spent = albe_st + queue;
                results[i][11] = Integer.toString(Time_spent);
                results[i][12] = Integer.toString(0);
                results[i][14] = Integer.toString(queue);
                results[i][8] = "-";
                results[i][9] = "-";
                results[i][10] = "-";
                results[i][13] = "-";
            }
        }
        for(int i=0;i<1;i++){
            for(int j=0;j<15;j++){
            System.out.print(results[i][j]+" |");
        }
            System.out.println();
      }
        
        for(int i=1;i<results.length;i++){
            for(int j=0;j<15;j++){
            System.out.print(" "+results[i][j]+" |");
        }
            System.out.println();
      }
    }

}
